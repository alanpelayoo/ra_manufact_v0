// Do not remove the include below
#include "ra_manufact_v0.h"


/* Constantes*/
Servo serv_1;
Servo serv_2;
Servo serv_3;
Servo serv_4;
Servo serv_5;
int flag=0;

int counter =0;

SoftwareSerial BT(5,6);

/*Valores iniciales de angulos*/

int Angulo_s1=80;
int Angulo_s2=80;
int Angulo_s3=80;
int Angulo_s4=90;
int Angulo_s5=90;




typedef enum{
	bt_init,
	Calibrate_servos,
	Pick_object,
	Return_ini,
	Deliver_object,
	Deliver_object_2,
	Return_90,

}raMEF_t;

raMEF_t ra_State;

/* Funciones */
void mefRAinit(void);
void mefRAupdate(void);
int mov_servo_inc(int angulo_i,int angulo_f, Servo servo_mov);
int mov_servo_dec(int angulo_i,int angulo_f, Servo servo_mov);
int bt_read(void);

void setup()
{
	BT.begin(9600);       // Inicializamos el puerto serie BT (Para Modo AT 2)
	Serial.begin(9600);
	serv_1.attach(8);
    serv_2.attach(9);
    serv_3.attach(10);
    serv_4.attach(11);
    serv_5.attach(7);
}


void loop()
{
	mefRAinit();
	while(1){
		mefRAupdate();


	}

}


void mefRAinit(void)
{
	ra_State=bt_init;

}


void mefRAupdate(void)
{
	switch(ra_State){

	case bt_init:

		flag =0;
		delay(500);
		flag = bt_read();
		delay(500);
		if (flag==1){
			ra_State =Calibrate_servos;


		}

		break;


	case Calibrate_servos:
		delay(500);

		serv_1.write(90);
		serv_2.write(90);
		serv_3.write(90);
		serv_4.write(100);
		serv_5.write(100);

		ra_State = Pick_object;
		break;

	case Pick_object:
		delay(500);
		Angulo_s1 = mov_servo_inc(Angulo_s1,170, serv_1);
		Angulo_s3 = mov_servo_inc(Angulo_s3,180, serv_3);
		Angulo_s2 = mov_servo_inc(Angulo_s2,130, serv_2);
		Angulo_s5 = mov_servo_inc(Angulo_s5,180, serv_5);
		Angulo_s2 = mov_servo_dec(Angulo_s2,30, serv_2);
		delay(50);
		Angulo_s4 = mov_servo_dec(Angulo_s4,0, serv_4);
		ra_State = Return_ini;
		break;

	case Return_ini:
		delay(500);
		Angulo_s2 = mov_servo_inc(Angulo_s2,130, serv_2);
		Angulo_s1 = mov_servo_dec(Angulo_s1,80, serv_1);
		ra_State = Deliver_object;
		break;

	case Deliver_object:
		delay(500);
		Angulo_s2 = mov_servo_dec(Angulo_s2,40, serv_2);
		Angulo_s4 = mov_servo_inc(Angulo_s4,90, serv_4);
		ra_State = Return_90;
		break;
	case Deliver_object_2:

		delay(500);
		Angulo_s1 = mov_servo_dec(Angulo_s1,150, serv_1);
		Angulo_s2 = mov_servo_dec(Angulo_s2,30, serv_2);
		delay(1000);
		Angulo_s4 = mov_servo_inc(Angulo_s4,95, serv_4);
		delay(100);
		serv_5.write(100);
		ra_State = Return_90;
		break;
	case Return_90:
		delay(500);// 23 ms por cada de grados tarda el MG996R
		Angulo_s1 = mov_servo_dec(Angulo_s1,95, serv_1);
		Angulo_s2 = mov_servo_inc(Angulo_s2,95, serv_2);
		Angulo_s3 = mov_servo_dec(Angulo_s3,95, serv_3);
		Angulo_s4 = mov_servo_inc(Angulo_s4,90, serv_4);
		serv_5.write(100);
		Angulo_s5 = 100;
		ra_State=bt_init;
		break;

	default:
		ra_State=Calibrate_servos;
		break;

	}
}


int mov_servo_inc(int angulo_i,int angulo_f, Servo servo_mov){
	for(angulo_i; angulo_i<angulo_f+1; angulo_i+=1)    // Decrementar de 1 en 1 el angulo que va de 180° hasta 0°
	  {
		servo_mov.write(angulo_i);

		delay(10);                              // Esperar 15 ms para que el servo alcance la posicion
	  }
	return angulo_i;
}

int mov_servo_dec(int angulo_i,int angulo_f, Servo servo_mov){
	for(angulo_i; angulo_i>=angulo_f; angulo_i-=1)    // Decrementar de 1 en 1 el angulo que va de 180° hasta 0°
	  {
		servo_mov.write(angulo_i);

		delay(10);                              // Esperar 15 ms para que el servo alcance la posicion
	  }
	return angulo_i;
}


int bt_read(void){

	int flag_2=0;
	String flag_1 = "";
	int n;
	n = BT.available();
	delay(500);
	if(n>0)    // Si llega un dato por el puerto BT se envía al monitor serial
	  {
		Serial.print("dentro_2");
		flag_1 = BT.readString();
		Serial.print(flag_1);
		if (flag_1=="1"){
				flag_2=1;
				return flag_2;

			}


		}
	return 0;

}